{"name":"PrimID","tagline":"Transform your internal id's to obfuscated integers based hashes","body":"# Methods\r\nPrimID uses only three functions.\r\n```javascript\r\nvar primid=require(\"primid\");\r\n// Get a new generator using desired settings (should be unique settings per application).\r\n// These should be prime numbers! Refer to the Numbers section below.\r\nvar generator=primid(prime,inverse,,xor);\r\n\r\n// Encode a number, get a integer based hash\r\nvar hash=generator.encode(some_number);\r\n\r\n// Decode a hash, get back a number\r\nvar number=generator.decode(hash);\r\n```\r\n\r\n# Numbers\r\nYou need to pick your own prime numbers unique to your application. For suggestions, look at [this list](http://primes.utm.edu/lists/small/millions/).\r\n\r\n# Usage example\r\n1. Create a new `primid` instance using\r\n```javascript\r\nvar primid = require('primid');\r\nvar generator = primid(1580030173, 59260789, 1163945558);\r\n```\r\n2. Generate a hash, in this example we want to obfruscate the value `15`\r\n```javascript\r\nlet hash=generator.encode(15);\r\n```\r\n3. Use the hash as output of your API or other system.\r\n4. Turn the hash back into a number. If the hash from the example above is used, then `id` is equal to `15`.\r\n```javascript\r\nlet id=generator.decode(hash);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}